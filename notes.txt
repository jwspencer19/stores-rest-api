Section 3

code for section
https://github.com/schoolofcode-me/rest-api-sections/tree/master/section3

requirement:
pip install flask

-----
# Create helloworld test docker image

docker build --tag=mytest01 .

docker run -p 4001:80 mytest01

-----

Section 4 and Section 5

#code for this section
https://github.com/schoolofcode-me/rest-api-sections/tree/master/section4
https://github.com/schoolofcode-me/rest-api-sections/tree/master/section5

Creating virtual environments

# In DOS command shell
cd C:\Spence\PycharmProjects\Rest
pip3.7 install virtualenv
mkdir section4
cd section4

# create the virtual environment
virtualenv venv --python=python3.7

# activate the virtual environment
venv\Scripts\activate.bat

# on Linux to activate the virtual environment
source venv/bin/activate

# should now see (venv) at beginning of prompt

# to deactivate virtual environment
deactivate

# list packages in virtual environment
pip list

# -or
pip freeze

# add package to virtual environment
pip install Flask-RESTful
pip install Flask-JWT

-----

Section 6

https://github.com/schoolofcode-me/rest-api-sections/tree/master/section6

-----

Section 7 - Git

cd C:\Spence\PycharmProjects\Rest\section7\code

# init a git repository
git init

git status

git add app.py

git commit -m "Created a simple Flash application"

create test-repository on Github.com

# push an existing repository from the command line
git remote add origin https://github.com/jwspencer19/test-repository.git
# probably fail since we just created it
git push
# run this command instead
git push --set-upstream origin master

# create ssh key and load to github

# remove existing origin
git remote remove origin

# add new origin using ssh 
git remote add origin git@github.com:jwspencer19/test-repository.git


-----

Section 8 - Heroku

https://github.com/schoolofcode-me/stores-rest-api

cd C:\Spence\PycharmProjects\Rest\section6\code
# create .gitignore file with these following:
__pycache__/
*.pyc

# create local repository
git init

git add *
git add .gitignore
git commit -m "First commit, added REST API to access items, stores, and user authentication."
git status

# create repository stores-rest-api on Github

# push our local repository to Github
git remote add origin git@github.com:jwspencer19/stores-rest-api.git
git push -u origin master

# better to create a branch and work in branch and then merge to master
git branch feature/item-categories
git checkout feature/items-categories
git status

# to merge our branch changes to master
git checkout master
git merge feature/item-categories
git push

# delete the branch
git branch -d feature/item-categories

# create a new branch to work
git branch feature/my-next-branch
git checkout feature/my-next-branch

# many steps in video to setup and deploy to Heroku

# URL generated after deploying
https://spencer19-stores-rest-api.herokuapp.com/

# Heroku Dev Center
https://devcenter.heroku.com/articles/heroku-command-line

# install command-line

# login from new command box
heroku login

# heroku logs --app=spencer19-stores-rest-api

-----

Section 9

Install Postgres on Linux system

Digital Ocean
Two free months
https://m.do.co/c/d54c088544ed

Using my CentOS system instead:

# install postgres on Centos
yum install postgresql-server postgresql-contrib

# install postgre on Ubuntu
apt-get install postgresql postgresql-contrib

# init the database
postgresql-setup initdb

# start the database
systemctl start postgresql

# optionally enable postgres to start on reboot automatically
systemctl enable postgresql

# run as postgres user
sudo -i -u postgres
psql
\conninfo

# create a user
adduser jose

# set password
passwd jose
usermod -aG wheel jose

# escalate jose user - edit file add jose as root
visudo
# add the following under root
jose    ALL=(ALL:ALL) ALL

# allow jose to ssh to system
vi /etc/ssh/sshd_config
# add AllowUsers under PasswordAuthentication
PasswordAuthentication yes
AllowUsers jose

# restart ssh service
service sshd reload

# ssh into system as jose
ssh jose@ip-addr

# to become root
sudo su

# as root, above, now become postgres user
sudo -i -u postgres

# create postgres user and set password
createuser jose -P

# create a database called jose
createdb jose

# exit twice to go back to jose user
exit
exit

# as user jose, run psql should bring us jose db
psql
\conninfo
You are connected to database "jose" as user "jose" via socket in "/var/run/postgresql" at port "5432"

# note: if want to delete a db, must be postgres user to do that
dropdb <name>

# edit conf file to force requesting password for jose db
vi /var/lib/pgsql/data/pg_hba.conf
# or on ubuntu, it might be
vi /etc/postgresql/9.5/main/pg_hba.conf
# SPENCER:HERE
# local   all             all                                     peer
local   all             all                                     ident

-----

Section 9

Install nginx - reverse proxy
- act as a gateway between our app and external users
- communicate with uwsgi to enable multi-threaded operation of our flask app
- can run multiple of our flask apps in our server

# on ubuntu
sudo apt-get update
sudo apt-get install nginx

# firewall on ubuntu
sudo ufw status
# if inactive, enable it
sudo ufw enable
# open firewall for nginx
sudo ufw allow 'Nginx HTTP'
# open firewall for ssh - so we can still ssh into our system
sudo ufw allow ssh

# check if nginx is running (active)
systemctl status nginx

# on centos[nginx]
# create this file
vi /etc/yum.repos.d/nginx.repo
[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/mainline/centos/7/$basearch/
gpgcheck=0
enabled=1

sudo yum install nginx

# firewall on centos - open port 80 and 443
sudo firewall-cmd --permanent --zone=public --add-service=http
sudo firewall-cmd --permanent --zone=public --add-service=https
sudo firewall-cmd --reload

# same commands on ubuntu and centos
sudo systemctl start nginx
sudo systemctl stop nginx
sudo systemctl restart nginx
sudo systemctl status nginx

# verify that port 80 or 443 opened using ss command
sudo ss -tulpn

# get server ip address
ip a

# browser
http://10.20.208.71/
# or curl command
curl http://10.20.208.71
curl -I http://10.20.208.71
# should see "Welcome to nginx!"

# configure nginx for our rest api
# add our rest api to nginx
# unbuntu - create new file
sudo vi /etc/nginx/sites-available/items-rest.conf
# centos - create new file

# add the following to the file
sudo vi /etc/nginx/conf.d/items-rest.conf
server {
listen 80;
real_ip_header X-Forwarded-For;
set_real_ip_from 127.0.0.1;
server_name localhost;

locaton / {
include uwsgi_params;
# SPENCER: Change this to point my github clone that I already created
#uwsgi_pass unix:/var/www/html/items-rest/socket.sock;
uwsgi_pass unix:/home/spencer/Git_hub/stores-rest-api/socket.sock;
uwsgi_modifier1 30;
}

error_page 404 /404.html;
location = /404.html {
root /usr/share/nginx/html;
}

error_page 500 502 503 504 /50x.html;
location = /50x.html {
root /usr/share/nginx/html;
}
}

# unbunto soft-link the file
sudo ln -s /etc/nginx/sites-available/items-rest.conf /etc/nginx/sites-enabled/

# make the directory structure
sudo mkdir /var/www/html/items-rest
# SPENCER: I'm using my /home/spencer/Git_hub/stores-rest-api Git clone instead
# sudo chown jose:jose /var/www/html/items-rest
# cd /var/www/html/items-rest
git clone https://github.com/../ .
# instead
cd /home/spencer/Git_hub/stores-rest-api
mkdir log

# ubuntu install python
sudo apt-get install python-pip python3-dev libpq-dev

# centos install python
yum install centos-release-scl
yum install rh-python36
# still version 2.x
python --version

scl enable rh-python36 bash
# now 3.x, note: only set in this shell session. Exit session will go back to 2.x
python --version

# install virtualenv
pip install virtualenv

# create the virtual environment
cd /home/spencer/Git_hub/stores-rest-api
virtualenv venv --python=python3.6

# activate our virtual environment
source venv/bin/activate

# note: on my centos system, it could not find gcc
yum install gcc
# to fix libpq error
yum install postgresql-devel

pip install -r requirements.txt


-----
Start separate Postgres Docker image

mkdir -p C:\Temp\postgres_volume

# not working on windows with a volume
docker run --rm   --name pg-docker -e POSTGRES_PASSWORD=docker -d -p 5432:5432 -v c:/Temp/postgres_volume:/var/lib/postgresql/data  postgres:latesth

# volume on Linux
docker run --rm  --name pg-docker -e POSTGRES_PASSWORD=docker -v /home/spencer/postgres_data:/var/lib/postgresql/data -d -p 5432:5432 postgres:latest

# no volume
docker run --rm  --name pg-docker -e POSTGRES_PASSWORD=docker -d -p 5432:5432 postgres:latest



-----
Create and Run Docker image

docker build --tag=rest-section6 .

docker run -p 4000:5000 rest-section6

docker run --name rest-test -d -p 4000:5000 rest-section6

docker run --name rest-test -e DATABASE_URL=postgresql://postgres:docker@BDS-208-71:5432/postgres -d -p 4000:5000 rest-section6

----

Install docker-compose

curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

create file docker-compose.yml

# start the containers
docker-compose up

# stop the containers
docker-compose down


